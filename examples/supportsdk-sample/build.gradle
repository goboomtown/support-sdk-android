buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://maven.google.com"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

//allprojects {
//    repositories {
//        jcenter()
//        mavenCentral()
//        maven {
//            url "https://maven.google.com"
//        }
//        maven {
//            url "http://jitpack.io"
//        }
//    }
//}

ext {
    global_compileSdkVersion = 29
    global_minSdkVersion = 17
    android_build_tools_version = "29.0.2"
    android_support_lib_version = "28.0.0"
    swagger_annotations_version = "1.5.0"
    jackson_version = "2.4.2"
    jersey_version = "2.22"
    jodatime_version = "2.3"
    junit_version = "4.12"
    smack_lib_version = "4.3.1" //"4.1.0"
}

apply plugin: 'com.android.application'

android {
    signingConfigs {
        release {
            storeFile file('/Users/larry/Documents/Development/GizmoCreative/android/support-sdk-android/examples/supportsdk-sample/keystore/boomtown.keystore')
            storePassword 'B00mtown'
            keyAlias = 'Boomtown'
            keyPassword 'B00mtown'
        }
    }
    compileSdkVersion global_compileSdkVersion
    buildToolsVersion android_build_tools_version

    /* Changing version numbers
 *
 *  1.  Update version information as necessary
 *
 *  2.  Reset VERSION_BUILD in ../gradle.properties = 1
 *
 */
    def versionMajor = 1
    def versionMinor = 0
    def versionPatch = 0
    def versionBuild
    def versionPropsFile = file('../../gradle.properties')

    /*  Setting default value for versionBuild which is the last incremented value
     *  stored in the file
     */
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps['VERSION_BUILD'].toInteger()
    } else {
        throw new GradleException("Could not read ${versionPropsFile}!")
    }

    /*  Wrapping inside a method avoids auto incrementing on every gradle task run.
     *  Now it runs only when we build apk
     */
    ext.autoIncrementBuildNumber = {
        if (versionPropsFile.canRead()) {
            def Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
            versionProps['VERSION_BUILD'] = versionBuild.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        } else {
            throw new GradleException("Could not read ${versionPropsFile}!")
        }
    }


    defaultConfig {
        applicationId "com.goboomtown.supportsdk.sample"
        minSdkVersion global_minSdkVersion
        targetSdkVersion global_compileSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    // Rename the aar correctly
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "${project.name}-${variant.baseName}-${versionMajor}.${versionMinor}.${versionPatch}.aar"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }

    flavorDimensions "androidplatform", "cloudapi"

    productFlavors {
        production {
            manifestPlaceholders = [
                    applicationLabel:"@string/app_name",
                    flavor: "production"
            ]
            dimension = "cloudapi"
        }
        stage {
            applicationId "com.goboomtown.supportsdk.sample.stage"
            manifestPlaceholders = [
                    applicationLabel:"@string/app_name_stage",
                    flavor: "stage"
            ]
            dimension = "cloudapi"
        }
        gplay {
            dimension = "androidplatform"
        }
        pax {
            applicationId "com.goboomtown.supportsdk.sample.pax"
//            applicationIdSuffix ".pax"
            multiDexEnabled true
            minSdkVersion 19
            ext.global_minSdkVersion = 19
            dimension = "androidplatform"
        }
        clover {
            applicationId "com.goboomtown.supportsdk.sample.clover"
//            applicationIdSuffix ".clover"
            multiDexEnabled true
            dimension = "androidplatform"
            minSdkVersion 17
            ext.global_minSdkVersion = 17
            targetSdkVersion(25)
            signingConfigs {
                debug {
                    storeFile file("keystore/boomtown.keystore")
                    storePassword "b00mtown"
                    keyAlias "boomtown"
                    keyPassword "b00mtown"
                }

                release {
                    storeFile file("keystore/boomtown.keystore")
                    storePassword "b00mtown"
                    keyAlias "boomtown"
                    keyPassword "b00mtown"
                }
            }
        }
    }


    variantFilter { variant ->
        setIgnore(false)
        print '***** variant.name=' + variant.name + ', buildType.name=' + variant.buildType.name
        println ' has ' + variant.flavors.size() + ' flavors: '
        variant.getFlavors().each { flavor ->
            println "***** * flavor.name=" + flavor.name + ", flavor.dimension=" + flavor.dimension + ' *****'
        }
    }

    /*  Hook to check if the release/debug task is among the tasks to be executed.
     *  Let's make use of it
     */
    gradle.taskGraph.whenReady {taskGraph ->
        // println '***** all tasks: ' + taskGraph.allTasks + ' *****'
        def hasTask = false
        print '***** build number'
        taskGraph.allTasks.each { task ->
            if (task.name.toLowerCase().contains("stage")
                    || task.name.toLowerCase().contains("production")) {
                hasTask = true
            }
        }
        if (hasTask) {
            autoIncrementBuildNumber()
        } else {
            print ' NOT'
        }
        println ' incremented *****'
    }


}

configurations {
    all*.exclude group: 'xpp3', module: 'xpp3'

    compile.exclude group: 'androidx.annotation', module: 'annotation'

    implementation.exclude group: 'org.jetbrains', module: 'annotations'
}

dependencies {
    paxImplementation 'com.android.support:multidex:1.0.3'
    cloverImplementation 'com.android.support:multidex:1.0.3'

    implementation project(':support-sdk')

//    gplayImplementation fileTree(dir: 'libs', include: ['support-sdk-gplay-stage-debug.aar'])
//    gplayImplementation fileTree(dir: 'libs', include: ['boomtown-boomtownchat-android-debug.aar'])
//    gplayImplementation fileTree(dir: 'libs', include: ['boomtown-video-android-debug.aar'])

//    paxImplementation fileTree(dir: 'libs', include: ['support-sdk-pax-stage-debug.aar'])
    paxImplementation 'com.pax.market:paxstore-3rd-app-android-sdk:7.1.1'

//    cloverImplementation fileTree(dir: 'libs', include: ['support-sdk-clover-stage-debug.aar'])
    cloverImplementation 'com.clover.sdk:clover-android-sdk:latest.release'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation('androidx.appcompat:appcompat:1.0.0') {
        exclude module: 'support-v4'
    }

    implementation 'com.google.android.material:material:1.1.0'

//  Start Support SDK dependencies

    implementation "com.wefika:flowlayout:0.4.1"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "org.igniterealtime.smack:smack-android-extensions:4.3.1"
    implementation "org.igniterealtime.smack:smack-tcp:4.3.1"
    implementation "joda-time:joda-time:2.3"
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.8'
    implementation "org.apache.commons:commons-compress:1.18"
    implementation('com.twilio:video-android:5.1.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation 'org.conscrypt:conscrypt-android:2.4.0'

//  End Support SDK dependencies

    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation "junit:junit:$junit_version"
}
